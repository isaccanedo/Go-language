Introduction, Syntax, Formatting, Packages, Types
Lesson 1
10 Dec 2019
Tags: golang, go

Stanislav Kozina <skozina@redhat.com>
Jakub ÄŒajka <jcajka@redhat.com>
Red Hat, Inc.
https://github.com/RedHatOfficial/GoCourse

* Sources
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png

* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900

* Introduction
- Launched in November 2009 by Google
- Rob Pike, Ken Thompson, Robert Griesemer
- More readable replacement for C/C++/Java/...
- statically typed, compiled, garbage collected
- built-in concurrency
- server-side web (PHP, Node.js, Python)
- cloud technologies (docker, kubernetes)

* Resources
- Tour of Go [[https://tour.golang.org/welcome/1]]
- Effective Go [[https://golang.org/doc/effective_go.html]]
- Go Doc [[https://godoc.org/]]
- Go cheatsheet [[http://www.cheat-sheets.org/saved-copy/go-lang-cheat-sheet-master.20181212/golang_refcard.pdf]]
- The Zen of Go [[https://the-zen-of-go.netlify.app/]]



* Development interface
- Vim;-)
- Visual Studio Code + go lang support [[https://code.visualstudio.com/docs/setup/linux]]
- GoLand from JetBrains



* Go keywords

  break     case   chan    const       continue
  default   defer  else    fallthrough for
  func      go     goto    if          import
  interface map    package range       return
  select    struct switch  type        var



* Packages and Imports
- Program building blocks ("libraries")
- Imported by other programs
- Package name is the last element of the import path
- Standard packages: [[https://golang.org/pkg/]]

.code lesson1/packages.go

* Hello world
.play lesson1/hello.go
.code lesson1/run_hello.go
.code lesson1/build_hello.go

* Unicode support
.play lesson1/hello_u.go

* Packages
- special package main: main() for executables
- Workspace defined by $GOPATH
- Structure for libraries, binaries: src, bin

* go-fmt
.play lesson1/gofmt1.go
.code lesson1/gofmt.go
.play lesson1/gofmt2.go

* Syntax
- Evolved from C
- Declarations in postfix
- Exported symbols begin with Capital letter
- [[https://blog.golang.org/gos-declaration-syntax]]

.code lesson1/syntax_c.go
.code lesson1/syntax_go.go

* Functions
.play lesson1/functions.go

* Multiple return values
.play lesson1/functions2.go

* Multiple return values
.play lesson1/functions2B.go

* Named return values
.play lesson1/functions3.go

* Variables
.play lesson1/vars.go

* Types
- Similar to C
- No auto casts
- Type inference && default types
- Each type has clear zero value (0, false, "")
.code lesson1/types.go

* Outside basic types
- math/Int
- math/Rat
- math/Float

* Type conversions
- No auto casts
.play lesson1/casts.go

* Constants
.play lesson1/const.go

* Loops
- Just for loop which also serves as while loop
.play lesson1/for.go

* Loops
- break keyword
- continue keyword

* Conditions
- Similarly to for loop allows init statement
- Variables declared there don't exist outside of the if block
.play lesson1/if.go

* Else statement
- Variables declared in the init statement do exist in the else block
.play lesson1/if2.go

* Switch statement
- Again allows init statement
- Like set of if-else statements
- Evaluated top-bottom, first successful case is executed
- Thus there's no break statement
.play lesson1/switch.go

* Switch statement 2
- Allows non-constant and non-integer values
.play lesson1/switch2.go

* Switch with no condition
- switch without condition is like switch true
.play lesson1/switch3.go

* Error handling
- error is built-in type
[[https://blog.golang.org/error-handling-and-go]]
.play lesson1/ret.go

* Ignoring return values
- '_' idiom can be used to drop return values
.play lesson1/ret2.go

* Useful links

The Why of Go (put many Go-related things into context)
[[https://www.youtube.com/watch?v=bmZNaUcwBt4&list=WL]]

GothamGo 2018 - Things in Go I Never Use by Mat Ryer
[[https://www.youtube.com/watch?v=5DVV36uqQ4E]]

#last slide
* More Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900
